defaultTasks 'clean', 'test', 'aggregate'

repositories {
    mavenCentral()
    mavenLocal()
}

buildscript {
    repositories {
        mavenCentral()
        mavenLocal()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:4.2.0.3129"
        classpath "net.serenity-bdd:serenity-gradle-plugin:3.6.7"
    }
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'net.serenity-bdd.serenity-gradle-plugin'
apply plugin: 'org.sonarqube'

version '1.0-SNAPSHOT'

sourceCompatibility = 1.8
targetCompatibility = 1.8

serenity {
    reports = ["single-page-html"]
    testRoot = "starter"
    requirementsDir = "src/test/resources/features"
}

ext {
    serenityCore = '3.6.23'
    appiumVersion = '8.2.1'
    junitJupiterEngine = '5.9.2'
}

dependencies {
    implementation "net.serenity-bdd:serenity-core:${serenityCore}"
    implementation "net.serenity-bdd:serenity-cucumber:${serenityCore}"
    implementation "net.serenity-bdd:serenity-screenplay:${serenityCore}"
    implementation "net.serenity-bdd:serenity-screenplay-webdriver:${serenityCore}"
    implementation "net.serenity-bdd:serenity-screenplay-rest:${serenityCore}"
    implementation "net.serenity-bdd:serenity-ensure:${serenityCore}"
    implementation "net.serenity-bdd:serenity-assertions:${serenityCore}"
    implementation "net.serenity-bdd:serenity-single-page-report:${serenityCore}"

    implementation 'io.cucumber:cucumber-java:7.11.0'
    implementation 'io.cucumber:cucumber-junit:7.11.0'
    implementation 'org.assertj:assertj-core:3.23.1'
    implementation 'org.hamcrest:hamcrest-all:1.3'

    implementation 'org.junit.platform:junit-platform-launcher:1.9.2'
    implementation "org.junit.jupiter:junit-jupiter-engine:${junitJupiterEngine}"
    implementation "org.junit.vintage:junit-vintage-engine:${junitJupiterEngine}"

    implementation 'ch.qos.logback:logback-classic:1.4.5'
    implementation 'org.slf4j:slf4j-simple:2.0.7'
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

task parallel(type: Test) {
    includes = ['**/CnxRunner.class']
    excludes = []

    useJUnit()
    systemProperties = System.properties
    maxParallelForks = Runtime.runtime.availableProcessors()

    gradle.startParameter.continueOnFailure = true
    test.finalizedBy(aggregate)
}

test {
    //useJUnit()
    useJUnitPlatform()
    ignoreFailures = true
    testLogging.showStandardStreams = true
    systemProperties System.getProperties()
    systemProperty "cucumber.options", System.properties.getProperty("cucumber.options")
}

gradle.startParameter.continueOnFailure = true
test.finalizedBy(aggregate)